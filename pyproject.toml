[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "generative-diffusion"
dynamic = ["version"]
description = "Generative models using denoising diffusion in PyTorch."
readme = "README.md"
requires-python = ">=3.12"
license = "MIT"
keywords = []
authors = [
  { name = "libertininick", email = "libertini.nick@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "jaxtyping",
  "kornia",
  "more-itertools",
  "python-dotenv",
  "tensordict",
  "torch>=2.0.0",
  "torchvision",
  "typeguard",
]

[project.optional-dependencies]
test = [
  "coverage[toml]>=6.5",
  "hypothesis",
  "pytest",
  "pytest-check",
  "scipy",
]
lint = [
  "black[jupyter]",
  "mypy",
  "ruff",
]
jupyter = [
  "ipykernel",
  "ipywidgets",
  "matplotlib",
]
dev = [
  "generative-diffusion[jupyter,lint,test]",
]


[project.urls]
Documentation = "https://github.com/libertininick/generative-diffusion#readme"
Source = "https://github.com/libertininick/generative-diffusion/src/generative_diffusion"


# Tool Config
# Black formatting configuration
[tool.black]
target-version = ["py312"]
line-length = 88

# Test converage configuration
[tool.coverage.run]
source_pkgs = ["generative-diffusion", "tests"]
branch = true
data_file = "build/.coverage"
source = [
    "src",
    "tests",
]

[tool.coverage.paths]
generative-diffusion = ["src/generative-diffusion", "*/generative-diffusion/src/generative_diffusion"]
tests = ["tests", "*/generative-diffusion/tests"]

[tool.coverage.report]
exclude_also = [
    "def __repr__"
]
fail_under = 80
precision = 1
show_missing = true
skip_covered = true
skip_empty = true

# Hatch configuration
[tool.hatch.version]
path = "src/generative_diffusion/__init__.py"

# Default evironment configuration
[tool.hatch.envs.default]
python = "3.12"
installer = "uv"
dependencies = ["generative-diffusion[dev]"]

[tool.hatch.envs.default.scripts]
typing = "mypy --install-types --non-interactive {args:src tests}"
fmt = [
  "black {args:.}",
  "ruff check --fix {args:.}",
  "style",
]
lint = [
  "fmt",
  "typing",
]

# Test evironments configuration
[tool.hatch.envs.test]
installer = "uv"
dependencies = ["generative-diffusion[test]"]
[tool.hatch.envs.test.scripts]
test = "pytest"
test-cov = "coverage run -m pytest"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]
[[tool.hatch.envs.test.matrix]]
python = ["3.12"]


# MyPy configuration
[tool.mypy]
python_version = "3.12"
cache_dir = "./build/.mypy_cache"
disallow_untyped_defs = true
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_context = true
warn_unreachable = true

# Pytest configuration
[tool.pytest.ini_options]
addopts = "-rf --doctest-modules --doctest-continue-on-failure --strict-markers"
cache_dir = "./build/pytest"
console_output_style = "progress"
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore:Default grid_sample and affine_grid behavior has changed to align_corners=False *:UserWarning",
]
markers = [
  "slow",
]
minversion = "6.0"
testpaths = [
  "src",
  "tests",
]

# Ruff configuration
[tool.ruff]
target-version = "py312"  # python version of code
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
line-length = 88  # set max line length 
indent-width = 4
cache-dir = "./build/.ruff_cache"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
  "A",        # flake8-builtins
  "ANN",      # flake8-annotations
  "ARG",      # flake8-unused-arguments
  "B",        # flake8-bugbear 
  "C4",       # flake8-comprehensions 
  "C9",       # max-complexity
  "D",        # pydocstyle
  "E", "W",   # pycodestyle 
  "E501",     # `line-too-long` rule
  "F",        # pyflakes 
  "FBT",      # flake8-boolean-trap
  "I",        # isort 
  "ICN",      # flake8-import-conventions
  "ISC",      # flake8-implicit-str-concat
  "N",        # pep8-naming
  "PL",       # Pylint
  "Q",        # flake8-quotes
  "RUF",      # Ruff-specific rules
  "S",        # flake8-bandit
  "SIM",      # flake8-simplify 
  "TID",      # flae8-tidy-imports 
  "UP",       # pyupgrade
]
ignore = [
  "ANN002",   # Missing type annotation for `*args`
  "ANN003",   # Missing type annotation for `**kwargs`
  "ANN101",   # missing-type-self
  "ANN102",   # missing-type-cls
  "ANN401",   # disallow any-type
  "B027",     # Allow non-abstract empty methods in abstract base classes 
  "FBT003",   # Allow boolean pos values in func calls, like `dict.get(... True)`
  "F722",     # Don't check forward annotations with jaxtyping
  "S105", "S106", "S107", # Ignore checks for possible passwords
]
per-file-ignores = {"**/{tests}/*" = [ 
  # Tests can use magic values, assertions, and relative imports
  "PLR2004", "S101", "TID252"
]}
extend-unsafe-fixes = ["E", "F401"]
pydocstyle = {convention = "numpy"}
mccabe = {max-complexity = 7}
flake8-tidy-imports = {ban-relative-imports = "all"}
isort = {known-first-party = ["generative_diffusion", "tests"]}
pylint = {max-args = 7}